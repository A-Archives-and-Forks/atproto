// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file bsky.proto (package bsky, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * - Return follow uris where user A follows users B, C, D, …
 *     - E.g. for viewer state on `getProfiles`
 *
 * @generated from message bsky.GetActorFollowsActorsRequest
 */
export class GetActorFollowsActorsRequest extends Message<GetActorFollowsActorsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: repeated string target_dids = 2;
   */
  targetDids: string[] = [];

  constructor(data?: PartialMessage<GetActorFollowsActorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorFollowsActorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorFollowsActorsRequest {
    return new GetActorFollowsActorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorFollowsActorsRequest | PlainMessage<GetActorFollowsActorsRequest> | undefined, b: GetActorFollowsActorsRequest | PlainMessage<GetActorFollowsActorsRequest> | undefined): boolean {
    return proto3.util.equals(GetActorFollowsActorsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorFollowsActorsResponse
 */
export class GetActorFollowsActorsResponse extends Message<GetActorFollowsActorsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetActorFollowsActorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorFollowsActorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorFollowsActorsResponse {
    return new GetActorFollowsActorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorFollowsActorsResponse | PlainMessage<GetActorFollowsActorsResponse> | undefined, b: GetActorFollowsActorsResponse | PlainMessage<GetActorFollowsActorsResponse> | undefined): boolean {
    return proto3.util.equals(GetActorFollowsActorsResponse, a, b);
  }
}

/**
 * - Return follow uris of users who follows user A
 *     - For `getFollowers` list
 *
 * @generated from message bsky.GetFollowersRequest
 */
export class GetFollowersRequest extends Message<GetFollowersRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetFollowersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowersRequest {
    return new GetFollowersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowersRequest {
    return new GetFollowersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowersRequest {
    return new GetFollowersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowersRequest | PlainMessage<GetFollowersRequest> | undefined, b: GetFollowersRequest | PlainMessage<GetFollowersRequest> | undefined): boolean {
    return proto3.util.equals(GetFollowersRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFollowersResponse
 */
export class GetFollowersResponse extends Message<GetFollowersResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetFollowersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowersResponse {
    return new GetFollowersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowersResponse {
    return new GetFollowersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowersResponse {
    return new GetFollowersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowersResponse | PlainMessage<GetFollowersResponse> | undefined, b: GetFollowersResponse | PlainMessage<GetFollowersResponse> | undefined): boolean {
    return proto3.util.equals(GetFollowersResponse, a, b);
  }
}

/**
 * - Return follow uris of users A follows
 *     - For `getFollows` list
 *
 * @generated from message bsky.GetFollowsRequest
 */
export class GetFollowsRequest extends Message<GetFollowsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetFollowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowsRequest {
    return new GetFollowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowsRequest {
    return new GetFollowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowsRequest {
    return new GetFollowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowsRequest | PlainMessage<GetFollowsRequest> | undefined, b: GetFollowsRequest | PlainMessage<GetFollowsRequest> | undefined): boolean {
    return proto3.util.equals(GetFollowsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFollowsResponse
 */
export class GetFollowsResponse extends Message<GetFollowsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetFollowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowsResponse {
    return new GetFollowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowsResponse {
    return new GetFollowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowsResponse {
    return new GetFollowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowsResponse | PlainMessage<GetFollowsResponse> | undefined, b: GetFollowsResponse | PlainMessage<GetFollowsResponse> | undefined): boolean {
    return proto3.util.equals(GetFollowsResponse, a, b);
  }
}

/**
 * - Return number of users who follow A
 *     - For `followersCount` on a profile
 *
 * @generated from message bsky.GetFollowersCountRequest
 */
export class GetFollowersCountRequest extends Message<GetFollowersCountRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetFollowersCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowersCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowersCountRequest {
    return new GetFollowersCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowersCountRequest {
    return new GetFollowersCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowersCountRequest {
    return new GetFollowersCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowersCountRequest | PlainMessage<GetFollowersCountRequest> | undefined, b: GetFollowersCountRequest | PlainMessage<GetFollowersCountRequest> | undefined): boolean {
    return proto3.util.equals(GetFollowersCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFollowersCountResponse
 */
export class GetFollowersCountResponse extends Message<GetFollowersCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetFollowersCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowersCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowersCountResponse {
    return new GetFollowersCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowersCountResponse {
    return new GetFollowersCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowersCountResponse {
    return new GetFollowersCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowersCountResponse | PlainMessage<GetFollowersCountResponse> | undefined, b: GetFollowersCountResponse | PlainMessage<GetFollowersCountResponse> | undefined): boolean {
    return proto3.util.equals(GetFollowersCountResponse, a, b);
  }
}

/**
 * - Return number of users followed by A
 *     - For `followCount` on a profile
 *
 * @generated from message bsky.GetFollowsCountRequest
 */
export class GetFollowsCountRequest extends Message<GetFollowsCountRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetFollowsCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowsCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowsCountRequest {
    return new GetFollowsCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowsCountRequest {
    return new GetFollowsCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowsCountRequest {
    return new GetFollowsCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowsCountRequest | PlainMessage<GetFollowsCountRequest> | undefined, b: GetFollowsCountRequest | PlainMessage<GetFollowsCountRequest> | undefined): boolean {
    return proto3.util.equals(GetFollowsCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFollowsCountResponse
 */
export class GetFollowsCountResponse extends Message<GetFollowsCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetFollowsCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFollowsCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFollowsCountResponse {
    return new GetFollowsCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFollowsCountResponse {
    return new GetFollowsCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFollowsCountResponse {
    return new GetFollowsCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFollowsCountResponse | PlainMessage<GetFollowsCountResponse> | undefined, b: GetFollowsCountResponse | PlainMessage<GetFollowsCountResponse> | undefined): boolean {
    return proto3.util.equals(GetFollowsCountResponse, a, b);
  }
}

/**
 * - return like uris where subject uri is subject A
 *     - `getLikes` list for a post
 *
 * @generated from message bsky.GetLikesBySubjectRequest
 */
export class GetLikesBySubjectRequest extends Message<GetLikesBySubjectRequest> {
  /**
   * @generated from field: string subject_uri = 1;
   */
  subjectUri = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetLikesBySubjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikesBySubjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesBySubjectRequest {
    return new GetLikesBySubjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesBySubjectRequest | PlainMessage<GetLikesBySubjectRequest> | undefined, b: GetLikesBySubjectRequest | PlainMessage<GetLikesBySubjectRequest> | undefined): boolean {
    return proto3.util.equals(GetLikesBySubjectRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetLikesBySubjectResponse
 */
export class GetLikesBySubjectResponse extends Message<GetLikesBySubjectResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetLikesBySubjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikesBySubjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesBySubjectResponse {
    return new GetLikesBySubjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesBySubjectResponse | PlainMessage<GetLikesBySubjectResponse> | undefined, b: GetLikesBySubjectResponse | PlainMessage<GetLikesBySubjectResponse> | undefined): boolean {
    return proto3.util.equals(GetLikesBySubjectResponse, a, b);
  }
}

/**
 * - return like uri for user A on subject B
 *     - viewer state on posts
 *
 * @generated from message bsky.GetLikeByActorAndSubjectRequest
 */
export class GetLikeByActorAndSubjectRequest extends Message<GetLikeByActorAndSubjectRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string subject_uri = 2;
   */
  subjectUri = "";

  constructor(data?: PartialMessage<GetLikeByActorAndSubjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikeByActorAndSubjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikeByActorAndSubjectRequest {
    return new GetLikeByActorAndSubjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikeByActorAndSubjectRequest {
    return new GetLikeByActorAndSubjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikeByActorAndSubjectRequest {
    return new GetLikeByActorAndSubjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikeByActorAndSubjectRequest | PlainMessage<GetLikeByActorAndSubjectRequest> | undefined, b: GetLikeByActorAndSubjectRequest | PlainMessage<GetLikeByActorAndSubjectRequest> | undefined): boolean {
    return proto3.util.equals(GetLikeByActorAndSubjectRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetLikeByActorAndSubjectResponse
 */
export class GetLikeByActorAndSubjectResponse extends Message<GetLikeByActorAndSubjectResponse> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  constructor(data?: PartialMessage<GetLikeByActorAndSubjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikeByActorAndSubjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikeByActorAndSubjectResponse {
    return new GetLikeByActorAndSubjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikeByActorAndSubjectResponse {
    return new GetLikeByActorAndSubjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikeByActorAndSubjectResponse {
    return new GetLikeByActorAndSubjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikeByActorAndSubjectResponse | PlainMessage<GetLikeByActorAndSubjectResponse> | undefined, b: GetLikeByActorAndSubjectResponse | PlainMessage<GetLikeByActorAndSubjectResponse> | undefined): boolean {
    return proto3.util.equals(GetLikeByActorAndSubjectResponse, a, b);
  }
}

/**
 * - return recent like uris for user A
 *     - `getActorLikes` list for a user
 *
 * @generated from message bsky.GetActorLikesRequest
 */
export class GetActorLikesRequest extends Message<GetActorLikesRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorLikesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorLikesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorLikesRequest {
    return new GetActorLikesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorLikesRequest {
    return new GetActorLikesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorLikesRequest {
    return new GetActorLikesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorLikesRequest | PlainMessage<GetActorLikesRequest> | undefined, b: GetActorLikesRequest | PlainMessage<GetActorLikesRequest> | undefined): boolean {
    return proto3.util.equals(GetActorLikesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorLikesResponse
 */
export class GetActorLikesResponse extends Message<GetActorLikesResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorLikesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorLikesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorLikesResponse {
    return new GetActorLikesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorLikesResponse {
    return new GetActorLikesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorLikesResponse {
    return new GetActorLikesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorLikesResponse | PlainMessage<GetActorLikesResponse> | undefined, b: GetActorLikesResponse | PlainMessage<GetActorLikesResponse> | undefined): boolean {
    return proto3.util.equals(GetActorLikesResponse, a, b);
  }
}

/**
 * - return number of likes on subject A
 *     - post or feed generator hydration `likeCount` field
 *
 * @generated from message bsky.GetLikesCountRequest
 */
export class GetLikesCountRequest extends Message<GetLikesCountRequest> {
  /**
   * @generated from field: string subject_uri = 1;
   */
  subjectUri = "";

  constructor(data?: PartialMessage<GetLikesCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikesCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesCountRequest {
    return new GetLikesCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesCountRequest {
    return new GetLikesCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesCountRequest {
    return new GetLikesCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesCountRequest | PlainMessage<GetLikesCountRequest> | undefined, b: GetLikesCountRequest | PlainMessage<GetLikesCountRequest> | undefined): boolean {
    return proto3.util.equals(GetLikesCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetLikesCountResponse
 */
export class GetLikesCountResponse extends Message<GetLikesCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetLikesCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLikesCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLikesCountResponse {
    return new GetLikesCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLikesCountResponse {
    return new GetLikesCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLikesCountResponse {
    return new GetLikesCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLikesCountResponse | PlainMessage<GetLikesCountResponse> | undefined, b: GetLikesCountResponse | PlainMessage<GetLikesCountResponse> | undefined): boolean {
    return proto3.util.equals(GetLikesCountResponse, a, b);
  }
}

/**
 * - return repost uris where subject uri is subject A
 *     - `getReposts` list for a post
 *
 * @generated from message bsky.GetRepostsBySubjectRequest
 */
export class GetRepostsBySubjectRequest extends Message<GetRepostsBySubjectRequest> {
  /**
   * @generated from field: string subject_uri = 1;
   */
  subjectUri = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetRepostsBySubjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostsBySubjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostsBySubjectRequest {
    return new GetRepostsBySubjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostsBySubjectRequest | PlainMessage<GetRepostsBySubjectRequest> | undefined, b: GetRepostsBySubjectRequest | PlainMessage<GetRepostsBySubjectRequest> | undefined): boolean {
    return proto3.util.equals(GetRepostsBySubjectRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetRepostsBySubjectResponse
 */
export class GetRepostsBySubjectResponse extends Message<GetRepostsBySubjectResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetRepostsBySubjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostsBySubjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostsBySubjectResponse {
    return new GetRepostsBySubjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostsBySubjectResponse | PlainMessage<GetRepostsBySubjectResponse> | undefined, b: GetRepostsBySubjectResponse | PlainMessage<GetRepostsBySubjectResponse> | undefined): boolean {
    return proto3.util.equals(GetRepostsBySubjectResponse, a, b);
  }
}

/**
 * - return repost uri for user A on subject B
 *     - viewer state on posts
 *
 * @generated from message bsky.GetRepostByActorAndSubjectRequest
 */
export class GetRepostByActorAndSubjectRequest extends Message<GetRepostByActorAndSubjectRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string subject_uri = 2;
   */
  subjectUri = "";

  constructor(data?: PartialMessage<GetRepostByActorAndSubjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostByActorAndSubjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostByActorAndSubjectRequest {
    return new GetRepostByActorAndSubjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostByActorAndSubjectRequest {
    return new GetRepostByActorAndSubjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostByActorAndSubjectRequest {
    return new GetRepostByActorAndSubjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostByActorAndSubjectRequest | PlainMessage<GetRepostByActorAndSubjectRequest> | undefined, b: GetRepostByActorAndSubjectRequest | PlainMessage<GetRepostByActorAndSubjectRequest> | undefined): boolean {
    return proto3.util.equals(GetRepostByActorAndSubjectRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetRepostByActorAndSubjectResponse
 */
export class GetRepostByActorAndSubjectResponse extends Message<GetRepostByActorAndSubjectResponse> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  constructor(data?: PartialMessage<GetRepostByActorAndSubjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostByActorAndSubjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostByActorAndSubjectResponse {
    return new GetRepostByActorAndSubjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostByActorAndSubjectResponse {
    return new GetRepostByActorAndSubjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostByActorAndSubjectResponse {
    return new GetRepostByActorAndSubjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostByActorAndSubjectResponse | PlainMessage<GetRepostByActorAndSubjectResponse> | undefined, b: GetRepostByActorAndSubjectResponse | PlainMessage<GetRepostByActorAndSubjectResponse> | undefined): boolean {
    return proto3.util.equals(GetRepostByActorAndSubjectResponse, a, b);
  }
}

/**
 * - return recent repost uris for user A
 *     - `getActorReposts` list for a user
 *
 * @generated from message bsky.GetActorRepostsRequest
 */
export class GetActorRepostsRequest extends Message<GetActorRepostsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorRepostsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorRepostsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorRepostsRequest {
    return new GetActorRepostsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorRepostsRequest | PlainMessage<GetActorRepostsRequest> | undefined, b: GetActorRepostsRequest | PlainMessage<GetActorRepostsRequest> | undefined): boolean {
    return proto3.util.equals(GetActorRepostsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorRepostsResponse
 */
export class GetActorRepostsResponse extends Message<GetActorRepostsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorRepostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorRepostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorRepostsResponse {
    return new GetActorRepostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorRepostsResponse | PlainMessage<GetActorRepostsResponse> | undefined, b: GetActorRepostsResponse | PlainMessage<GetActorRepostsResponse> | undefined): boolean {
    return proto3.util.equals(GetActorRepostsResponse, a, b);
  }
}

/**
 * - return number of reposts on subject A
 *     - post or feed generator hydration `repostCount` field
 *
 * @generated from message bsky.GetRepostsCountRequest
 */
export class GetRepostsCountRequest extends Message<GetRepostsCountRequest> {
  /**
   * @generated from field: string subject_uri = 1;
   */
  subjectUri = "";

  constructor(data?: PartialMessage<GetRepostsCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostsCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostsCountRequest {
    return new GetRepostsCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostsCountRequest {
    return new GetRepostsCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostsCountRequest {
    return new GetRepostsCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostsCountRequest | PlainMessage<GetRepostsCountRequest> | undefined, b: GetRepostsCountRequest | PlainMessage<GetRepostsCountRequest> | undefined): boolean {
    return proto3.util.equals(GetRepostsCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetRepostsCountResponse
 */
export class GetRepostsCountResponse extends Message<GetRepostsCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetRepostsCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetRepostsCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepostsCountResponse {
    return new GetRepostsCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepostsCountResponse {
    return new GetRepostsCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepostsCountResponse {
    return new GetRepostsCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepostsCountResponse | PlainMessage<GetRepostsCountResponse> | undefined, b: GetRepostsCountResponse | PlainMessage<GetRepostsCountResponse> | undefined): boolean {
    return proto3.util.equals(GetRepostsCountResponse, a, b);
  }
}

/**
 * - return profile record for dids A, B, C…
 *     - profile hydration
 *     - should this include handles?  apply repo takedown?
 *
 * @generated from message bsky.GetProfilesRequest
 */
export class GetProfilesRequest extends Message<GetProfilesRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetProfilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetProfilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfilesRequest {
    return new GetProfilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfilesRequest {
    return new GetProfilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfilesRequest {
    return new GetProfilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfilesRequest | PlainMessage<GetProfilesRequest> | undefined, b: GetProfilesRequest | PlainMessage<GetProfilesRequest> | undefined): boolean {
    return proto3.util.equals(GetProfilesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetProfilesResponse
 */
export class GetProfilesResponse extends Message<GetProfilesResponse> {
  /**
   * @generated from field: repeated bytes records = 1;
   */
  records: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetProfilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetProfilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfilesResponse {
    return new GetProfilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfilesResponse {
    return new GetProfilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfilesResponse {
    return new GetProfilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfilesResponse | PlainMessage<GetProfilesResponse> | undefined, b: GetProfilesResponse | PlainMessage<GetProfilesResponse> | undefined): boolean {
    return proto3.util.equals(GetProfilesResponse, a, b);
  }
}

/**
 * - return handle for dids A, B, C…
 *     - profile hydration
 *
 * @generated from message bsky.GetHandlesRequest
 */
export class GetHandlesRequest extends Message<GetHandlesRequest> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetHandlesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetHandlesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHandlesRequest {
    return new GetHandlesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHandlesRequest {
    return new GetHandlesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHandlesRequest {
    return new GetHandlesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHandlesRequest | PlainMessage<GetHandlesRequest> | undefined, b: GetHandlesRequest | PlainMessage<GetHandlesRequest> | undefined): boolean {
    return proto3.util.equals(GetHandlesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetHandlesResponse
 */
export class GetHandlesResponse extends Message<GetHandlesResponse> {
  /**
   * @generated from field: repeated string handles = 1;
   */
  handles: string[] = [];

  constructor(data?: PartialMessage<GetHandlesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetHandlesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHandlesResponse {
    return new GetHandlesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHandlesResponse {
    return new GetHandlesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHandlesResponse {
    return new GetHandlesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHandlesResponse | PlainMessage<GetHandlesResponse> | undefined, b: GetHandlesResponse | PlainMessage<GetHandlesResponse> | undefined): boolean {
    return proto3.util.equals(GetHandlesResponse, a, b);
  }
}

/**
 * - return did for handle A
 *     - `resolveHandle`
 *     - answering queries where the query param is a handle
 *
 * @generated from message bsky.GetDidsByHandlesRequest
 */
export class GetDidsByHandlesRequest extends Message<GetDidsByHandlesRequest> {
  /**
   * @generated from field: repeated string handles = 1;
   */
  handles: string[] = [];

  constructor(data?: PartialMessage<GetDidsByHandlesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetDidsByHandlesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "handles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDidsByHandlesRequest {
    return new GetDidsByHandlesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDidsByHandlesRequest | PlainMessage<GetDidsByHandlesRequest> | undefined, b: GetDidsByHandlesRequest | PlainMessage<GetDidsByHandlesRequest> | undefined): boolean {
    return proto3.util.equals(GetDidsByHandlesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetDidsByHandlesResponse
 */
export class GetDidsByHandlesResponse extends Message<GetDidsByHandlesResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  constructor(data?: PartialMessage<GetDidsByHandlesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetDidsByHandlesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDidsByHandlesResponse {
    return new GetDidsByHandlesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDidsByHandlesResponse | PlainMessage<GetDidsByHandlesResponse> | undefined, b: GetDidsByHandlesResponse | PlainMessage<GetDidsByHandlesResponse> | undefined): boolean {
    return proto3.util.equals(GetDidsByHandlesResponse, a, b);
  }
}

/**
 * - Return dids of users in list A
 *     - E.g. to view items in one of your mute lists
 *
 * @generated from message bsky.GetListMembersRequest
 */
export class GetListMembersRequest extends Message<GetListMembersRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetListMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListMembersRequest {
    return new GetListMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListMembersRequest {
    return new GetListMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListMembersRequest {
    return new GetListMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetListMembersRequest | PlainMessage<GetListMembersRequest> | undefined, b: GetListMembersRequest | PlainMessage<GetListMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetListMembersRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetListMembersResponse
 */
export class GetListMembersResponse extends Message<GetListMembersResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetListMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListMembersResponse {
    return new GetListMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListMembersResponse {
    return new GetListMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListMembersResponse {
    return new GetListMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetListMembersResponse | PlainMessage<GetListMembersResponse> | undefined, b: GetListMembersResponse | PlainMessage<GetListMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetListMembersResponse, a, b);
  }
}

/**
 * - Return list uris where user A in list B, C, D…
 *     - Used in thread reply gates
 *
 * @generated from message bsky.GetListMembershipRequest
 */
export class GetListMembershipRequest extends Message<GetListMembershipRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: repeated string list_uris = 2;
   */
  listUris: string[] = [];

  constructor(data?: PartialMessage<GetListMembershipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListMembershipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "list_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListMembershipRequest {
    return new GetListMembershipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListMembershipRequest {
    return new GetListMembershipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListMembershipRequest {
    return new GetListMembershipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetListMembershipRequest | PlainMessage<GetListMembershipRequest> | undefined, b: GetListMembershipRequest | PlainMessage<GetListMembershipRequest> | undefined): boolean {
    return proto3.util.equals(GetListMembershipRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetListMembershipResponse
 */
export class GetListMembershipResponse extends Message<GetListMembershipResponse> {
  /**
   * @generated from field: repeated string listitem_uris = 1;
   */
  listitemUris: string[] = [];

  constructor(data?: PartialMessage<GetListMembershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListMembershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "listitem_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListMembershipResponse {
    return new GetListMembershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListMembershipResponse {
    return new GetListMembershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListMembershipResponse {
    return new GetListMembershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetListMembershipResponse | PlainMessage<GetListMembershipResponse> | undefined, b: GetListMembershipResponse | PlainMessage<GetListMembershipResponse> | undefined): boolean {
    return proto3.util.equals(GetListMembershipResponse, a, b);
  }
}

/**
 * - Return list record for list uri
 *     - list view hydration
 *
 * @generated from message bsky.GetListRequest
 */
export class GetListRequest extends Message<GetListRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListRequest {
    return new GetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListRequest {
    return new GetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListRequest {
    return new GetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetListRequest | PlainMessage<GetListRequest> | undefined, b: GetListRequest | PlainMessage<GetListRequest> | undefined): boolean {
    return proto3.util.equals(GetListRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetListResponse
 */
export class GetListResponse extends Message<GetListResponse> {
  /**
   * @generated from field: bytes record = 1;
   */
  record = new Uint8Array(0);

  constructor(data?: PartialMessage<GetListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListResponse {
    return new GetListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListResponse {
    return new GetListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListResponse {
    return new GetListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetListResponse | PlainMessage<GetListResponse> | undefined, b: GetListResponse | PlainMessage<GetListResponse> | undefined): boolean {
    return proto3.util.equals(GetListResponse, a, b);
  }
}

/**
 * - Return number of items in list A
 *     - For aggregate
 *
 * @generated from message bsky.GetListCountRequest
 */
export class GetListCountRequest extends Message<GetListCountRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetListCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListCountRequest {
    return new GetListCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListCountRequest {
    return new GetListCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListCountRequest {
    return new GetListCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetListCountRequest | PlainMessage<GetListCountRequest> | undefined, b: GetListCountRequest | PlainMessage<GetListCountRequest> | undefined): boolean {
    return proto3.util.equals(GetListCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetListCountResponse
 */
export class GetListCountResponse extends Message<GetListCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetListCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListCountResponse {
    return new GetListCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListCountResponse {
    return new GetListCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListCountResponse {
    return new GetListCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetListCountResponse | PlainMessage<GetListCountResponse> | undefined, b: GetListCountResponse | PlainMessage<GetListCountResponse> | undefined): boolean {
    return proto3.util.equals(GetListCountResponse, a, b);
  }
}

/**
 * - return boolean if user A has muted user B
 *     - hydrating mute state onto profiles
 *
 * @generated from message bsky.GetActorMutesActorRequest
 */
export class GetActorMutesActorRequest extends Message<GetActorMutesActorRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = "";

  constructor(data?: PartialMessage<GetActorMutesActorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorMutesActorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorMutesActorRequest {
    return new GetActorMutesActorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorMutesActorRequest | PlainMessage<GetActorMutesActorRequest> | undefined, b: GetActorMutesActorRequest | PlainMessage<GetActorMutesActorRequest> | undefined): boolean {
    return proto3.util.equals(GetActorMutesActorRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorMutesActorResponse
 */
export class GetActorMutesActorResponse extends Message<GetActorMutesActorResponse> {
  /**
   * @generated from field: bool muted = 1;
   */
  muted = false;

  constructor(data?: PartialMessage<GetActorMutesActorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorMutesActorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "muted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorMutesActorResponse {
    return new GetActorMutesActorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorMutesActorResponse | PlainMessage<GetActorMutesActorResponse> | undefined, b: GetActorMutesActorResponse | PlainMessage<GetActorMutesActorResponse> | undefined): boolean {
    return proto3.util.equals(GetActorMutesActorResponse, a, b);
  }
}

/**
 * - return list of user dids of users who A mutes
 *     - `getMutes`
 *
 * @generated from message bsky.GetMutesRequest
 */
export class GetMutesRequest extends Message<GetMutesRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetMutesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutesRequest {
    return new GetMutesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutesRequest {
    return new GetMutesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutesRequest {
    return new GetMutesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutesRequest | PlainMessage<GetMutesRequest> | undefined, b: GetMutesRequest | PlainMessage<GetMutesRequest> | undefined): boolean {
    return proto3.util.equals(GetMutesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetMutesResponse
 */
export class GetMutesResponse extends Message<GetMutesResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetMutesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutesResponse {
    return new GetMutesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutesResponse {
    return new GetMutesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutesResponse {
    return new GetMutesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutesResponse | PlainMessage<GetMutesResponse> | undefined, b: GetMutesResponse | PlainMessage<GetMutesResponse> | undefined): boolean {
    return proto3.util.equals(GetMutesResponse, a, b);
  }
}

/**
 * - return list uri of *any* list through which user A has muted user B
 *     - hydrating mute state onto profiles
 *     - note: we only need *one* uri even if a user is muted by multiple lists
 *
 * @generated from message bsky.GetActorMutesActorViaListRequest
 */
export class GetActorMutesActorViaListRequest extends Message<GetActorMutesActorViaListRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = "";

  constructor(data?: PartialMessage<GetActorMutesActorViaListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorMutesActorViaListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorMutesActorViaListRequest {
    return new GetActorMutesActorViaListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorMutesActorViaListRequest | PlainMessage<GetActorMutesActorViaListRequest> | undefined, b: GetActorMutesActorViaListRequest | PlainMessage<GetActorMutesActorViaListRequest> | undefined): boolean {
    return proto3.util.equals(GetActorMutesActorViaListRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorMutesActorViaListResponse
 */
export class GetActorMutesActorViaListResponse extends Message<GetActorMutesActorViaListResponse> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetActorMutesActorViaListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorMutesActorViaListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorMutesActorViaListResponse {
    return new GetActorMutesActorViaListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorMutesActorViaListResponse | PlainMessage<GetActorMutesActorViaListResponse> | undefined, b: GetActorMutesActorViaListResponse | PlainMessage<GetActorMutesActorViaListResponse> | undefined): boolean {
    return proto3.util.equals(GetActorMutesActorViaListResponse, a, b);
  }
}

/**
 * - return boolean if actor A has subscribed to mutelist B
 *     - list view hydration
 *
 * @generated from message bsky.GetMutelistSubscriptionRequest
 */
export class GetMutelistSubscriptionRequest extends Message<GetMutelistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetMutelistSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutelistSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionRequest {
    return new GetMutelistSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutelistSubscriptionRequest | PlainMessage<GetMutelistSubscriptionRequest> | undefined, b: GetMutelistSubscriptionRequest | PlainMessage<GetMutelistSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetMutelistSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetMutelistSubscriptionResponse
 */
export class GetMutelistSubscriptionResponse extends Message<GetMutelistSubscriptionResponse> {
  /**
   * @generated from field: bool subscribed = 1;
   */
  subscribed = false;

  constructor(data?: PartialMessage<GetMutelistSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutelistSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionResponse {
    return new GetMutelistSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutelistSubscriptionResponse | PlainMessage<GetMutelistSubscriptionResponse> | undefined, b: GetMutelistSubscriptionResponse | PlainMessage<GetMutelistSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(GetMutelistSubscriptionResponse, a, b);
  }
}

/**
 * - return list of list uris of mutelists that A subscribes to
 *     - `getListMutes`
 *
 * @generated from message bsky.GetMutelistSubscriptionsRequest
 */
export class GetMutelistSubscriptionsRequest extends Message<GetMutelistSubscriptionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetMutelistSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutelistSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionsRequest {
    return new GetMutelistSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutelistSubscriptionsRequest | PlainMessage<GetMutelistSubscriptionsRequest> | undefined, b: GetMutelistSubscriptionsRequest | PlainMessage<GetMutelistSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(GetMutelistSubscriptionsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetMutelistSubscriptionsResponse
 */
export class GetMutelistSubscriptionsResponse extends Message<GetMutelistSubscriptionsResponse> {
  /**
   * @generated from field: repeated string list_uris = 1;
   */
  listUris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetMutelistSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetMutelistSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutelistSubscriptionsResponse {
    return new GetMutelistSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutelistSubscriptionsResponse | PlainMessage<GetMutelistSubscriptionsResponse> | undefined, b: GetMutelistSubscriptionsResponse | PlainMessage<GetMutelistSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(GetMutelistSubscriptionsResponse, a, b);
  }
}

/**
 * - Return block uri if there is a block between users A & B (bidirectional)
 *     - hydrating (& actioning) block state on profiles
 *     - handling 3rd party blocks
 *
 * @generated from message bsky.GetBidirectionalBlockRequest
 */
export class GetBidirectionalBlockRequest extends Message<GetBidirectionalBlockRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = "";

  constructor(data?: PartialMessage<GetBidirectionalBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBidirectionalBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBidirectionalBlockRequest {
    return new GetBidirectionalBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBidirectionalBlockRequest | PlainMessage<GetBidirectionalBlockRequest> | undefined, b: GetBidirectionalBlockRequest | PlainMessage<GetBidirectionalBlockRequest> | undefined): boolean {
    return proto3.util.equals(GetBidirectionalBlockRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBidirectionalBlockResponse
 */
export class GetBidirectionalBlockResponse extends Message<GetBidirectionalBlockResponse> {
  /**
   * @generated from field: string block_uri = 1;
   */
  blockUri = "";

  constructor(data?: PartialMessage<GetBidirectionalBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBidirectionalBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBidirectionalBlockResponse {
    return new GetBidirectionalBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBidirectionalBlockResponse | PlainMessage<GetBidirectionalBlockResponse> | undefined, b: GetBidirectionalBlockResponse | PlainMessage<GetBidirectionalBlockResponse> | undefined): boolean {
    return proto3.util.equals(GetBidirectionalBlockResponse, a, b);
  }
}

/**
 * - Return list of block uris and user dids of users who A blocks
 *     - `getBlocks`
 *
 * @generated from message bsky.GetBlocksRequest
 */
export class GetBlocksRequest extends Message<GetBlocksRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocksRequest {
    return new GetBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocksRequest {
    return new GetBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocksRequest {
    return new GetBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocksRequest | PlainMessage<GetBlocksRequest> | undefined, b: GetBlocksRequest | PlainMessage<GetBlocksRequest> | undefined): boolean {
    return proto3.util.equals(GetBlocksRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBlocksResponse
 */
export class GetBlocksResponse extends Message<GetBlocksResponse> {
  /**
   * @generated from field: repeated string block_uris = 1;
   */
  blockUris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocksResponse {
    return new GetBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocksResponse {
    return new GetBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocksResponse {
    return new GetBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocksResponse | PlainMessage<GetBlocksResponse> | undefined, b: GetBlocksResponse | PlainMessage<GetBlocksResponse> | undefined): boolean {
    return proto3.util.equals(GetBlocksResponse, a, b);
  }
}

/**
 * - Return list uri of ***any*** list through which users A & B have a block (bidirectional)
 *     - hydrating (& actioning) block state on profiles
 *     - handling 3rd party blocks
 *
 * @generated from message bsky.GetBidirectionalBlockViaListRequest
 */
export class GetBidirectionalBlockViaListRequest extends Message<GetBidirectionalBlockViaListRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string target_did = 2;
   */
  targetDid = "";

  constructor(data?: PartialMessage<GetBidirectionalBlockViaListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBidirectionalBlockViaListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBidirectionalBlockViaListRequest {
    return new GetBidirectionalBlockViaListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBidirectionalBlockViaListRequest | PlainMessage<GetBidirectionalBlockViaListRequest> | undefined, b: GetBidirectionalBlockViaListRequest | PlainMessage<GetBidirectionalBlockViaListRequest> | undefined): boolean {
    return proto3.util.equals(GetBidirectionalBlockViaListRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBidirectionalBlockViaListResponse
 */
export class GetBidirectionalBlockViaListResponse extends Message<GetBidirectionalBlockViaListResponse> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetBidirectionalBlockViaListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBidirectionalBlockViaListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBidirectionalBlockViaListResponse {
    return new GetBidirectionalBlockViaListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBidirectionalBlockViaListResponse | PlainMessage<GetBidirectionalBlockViaListResponse> | undefined, b: GetBidirectionalBlockViaListResponse | PlainMessage<GetBidirectionalBlockViaListResponse> | undefined): boolean {
    return proto3.util.equals(GetBidirectionalBlockViaListResponse, a, b);
  }
}

/**
 * - return boolean if user A has subscribed to blocklist B
 *     - list view hydration
 *
 * @generated from message bsky.GetBlocklistSubscriptionRequest
 */
export class GetBlocklistSubscriptionRequest extends Message<GetBlocklistSubscriptionRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string list_uri = 2;
   */
  listUri = "";

  constructor(data?: PartialMessage<GetBlocklistSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocklistSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionRequest {
    return new GetBlocklistSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocklistSubscriptionRequest | PlainMessage<GetBlocklistSubscriptionRequest> | undefined, b: GetBlocklistSubscriptionRequest | PlainMessage<GetBlocklistSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBlocklistSubscriptionResponse
 */
export class GetBlocklistSubscriptionResponse extends Message<GetBlocklistSubscriptionResponse> {
  /**
   * @generated from field: bool subscribed = 1;
   */
  subscribed = false;

  constructor(data?: PartialMessage<GetBlocklistSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocklistSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscribed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionResponse {
    return new GetBlocklistSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocklistSubscriptionResponse | PlainMessage<GetBlocklistSubscriptionResponse> | undefined, b: GetBlocklistSubscriptionResponse | PlainMessage<GetBlocklistSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionResponse, a, b);
  }
}

/**
 * - return list of list uris of Blockslists that A subscribes to
 *     - `getListBlocks`
 *
 * @generated from message bsky.GetBlocklistSubscriptionsRequest
 */
export class GetBlocklistSubscriptionsRequest extends Message<GetBlocklistSubscriptionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetBlocklistSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocklistSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionsRequest {
    return new GetBlocklistSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocklistSubscriptionsRequest | PlainMessage<GetBlocklistSubscriptionsRequest> | undefined, b: GetBlocklistSubscriptionsRequest | PlainMessage<GetBlocklistSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBlocklistSubscriptionsResponse
 */
export class GetBlocklistSubscriptionsResponse extends Message<GetBlocklistSubscriptionsResponse> {
  /**
   * @generated from field: repeated string list_uris = 1;
   */
  listUris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetBlocklistSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlocklistSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlocklistSubscriptionsResponse {
    return new GetBlocklistSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlocklistSubscriptionsResponse | PlainMessage<GetBlocklistSubscriptionsResponse> | undefined, b: GetBlocklistSubscriptionsResponse | PlainMessage<GetBlocklistSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(GetBlocklistSubscriptionsResponse, a, b);
  }
}

/**
 * - list recent notifications for a user
 *     - notifications should include a uri for the record that caused the notif & a “reason” for the notification (reply, like, quotepost, etc)
 *     - this should include both read & unread notifs
 *
 * @generated from message bsky.GetNotificationsRequest
 */
export class GetNotificationsRequest extends Message<GetNotificationsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetNotificationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetNotificationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationsRequest {
    return new GetNotificationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationsRequest {
    return new GetNotificationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationsRequest {
    return new GetNotificationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationsRequest | PlainMessage<GetNotificationsRequest> | undefined, b: GetNotificationsRequest | PlainMessage<GetNotificationsRequest> | undefined): boolean {
    return proto3.util.equals(GetNotificationsRequest, a, b);
  }
}

/**
 * @generated from message bsky.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

/**
 * @generated from message bsky.GetNotificationsResponse
 */
export class GetNotificationsResponse extends Message<GetNotificationsResponse> {
  /**
   * @generated from field: repeated bsky.Notification notifications = 1;
   */
  notifications: Notification[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetNotificationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetNotificationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "notifications", kind: "message", T: Notification, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationsResponse {
    return new GetNotificationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationsResponse {
    return new GetNotificationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationsResponse {
    return new GetNotificationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationsResponse | PlainMessage<GetNotificationsResponse> | undefined, b: GetNotificationsResponse | PlainMessage<GetNotificationsResponse> | undefined): boolean {
    return proto3.util.equals(GetNotificationsResponse, a, b);
  }
}

/**
 * - update a user’s “last seen time”
 *     - `updateSeen`
 *
 * @generated from message bsky.UpdateNotificationSeenRequest
 */
export class UpdateNotificationSeenRequest extends Message<UpdateNotificationSeenRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<UpdateNotificationSeenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.UpdateNotificationSeenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNotificationSeenRequest {
    return new UpdateNotificationSeenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNotificationSeenRequest | PlainMessage<UpdateNotificationSeenRequest> | undefined, b: UpdateNotificationSeenRequest | PlainMessage<UpdateNotificationSeenRequest> | undefined): boolean {
    return proto3.util.equals(UpdateNotificationSeenRequest, a, b);
  }
}

/**
 * @generated from message bsky.UpdateNotificationSeenResponse
 */
export class UpdateNotificationSeenResponse extends Message<UpdateNotificationSeenResponse> {
  constructor(data?: PartialMessage<UpdateNotificationSeenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.UpdateNotificationSeenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNotificationSeenResponse {
    return new UpdateNotificationSeenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNotificationSeenResponse | PlainMessage<UpdateNotificationSeenResponse> | undefined, b: UpdateNotificationSeenResponse | PlainMessage<UpdateNotificationSeenResponse> | undefined): boolean {
    return proto3.util.equals(UpdateNotificationSeenResponse, a, b);
  }
}

/**
 * - get a user’s “last seen time”
 *     - hydrating read state onto notifications
 *
 * @generated from message bsky.GetNotificationSeenRequest
 */
export class GetNotificationSeenRequest extends Message<GetNotificationSeenRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetNotificationSeenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetNotificationSeenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationSeenRequest {
    return new GetNotificationSeenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationSeenRequest | PlainMessage<GetNotificationSeenRequest> | undefined, b: GetNotificationSeenRequest | PlainMessage<GetNotificationSeenRequest> | undefined): boolean {
    return proto3.util.equals(GetNotificationSeenRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetNotificationSeenResponse
 */
export class GetNotificationSeenResponse extends Message<GetNotificationSeenResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<GetNotificationSeenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetNotificationSeenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNotificationSeenResponse {
    return new GetNotificationSeenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNotificationSeenResponse | PlainMessage<GetNotificationSeenResponse> | undefined, b: GetNotificationSeenResponse | PlainMessage<GetNotificationSeenResponse> | undefined): boolean {
    return proto3.util.equals(GetNotificationSeenResponse, a, b);
  }
}

/**
 * - get a count of all unread notifications (notifications after `updateSeen`)
 *     - `getUnreadCount`
 *
 * @generated from message bsky.GetUnreadNotificationCountRequest
 */
export class GetUnreadNotificationCountRequest extends Message<GetUnreadNotificationCountRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetUnreadNotificationCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetUnreadNotificationCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnreadNotificationCountRequest {
    return new GetUnreadNotificationCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnreadNotificationCountRequest | PlainMessage<GetUnreadNotificationCountRequest> | undefined, b: GetUnreadNotificationCountRequest | PlainMessage<GetUnreadNotificationCountRequest> | undefined): boolean {
    return proto3.util.equals(GetUnreadNotificationCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetUnreadNotificationCountResponse
 */
export class GetUnreadNotificationCountResponse extends Message<GetUnreadNotificationCountResponse> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetUnreadNotificationCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetUnreadNotificationCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUnreadNotificationCountResponse {
    return new GetUnreadNotificationCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUnreadNotificationCountResponse | PlainMessage<GetUnreadNotificationCountResponse> | undefined, b: GetUnreadNotificationCountResponse | PlainMessage<GetUnreadNotificationCountResponse> | undefined): boolean {
    return proto3.util.equals(GetUnreadNotificationCountResponse, a, b);
  }
}

/**
 * - Returns feed generator records with uris A, B, C…
 *     - hydration of feed generator views
 *
 * @generated from message bsky.GetFeedGeneratorsRequest
 */
export class GetFeedGeneratorsRequest extends Message<GetFeedGeneratorsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetFeedGeneratorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFeedGeneratorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedGeneratorsRequest {
    return new GetFeedGeneratorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedGeneratorsRequest {
    return new GetFeedGeneratorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedGeneratorsRequest {
    return new GetFeedGeneratorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedGeneratorsRequest | PlainMessage<GetFeedGeneratorsRequest> | undefined, b: GetFeedGeneratorsRequest | PlainMessage<GetFeedGeneratorsRequest> | undefined): boolean {
    return proto3.util.equals(GetFeedGeneratorsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFeedGeneratorsResponse
 */
export class GetFeedGeneratorsResponse extends Message<GetFeedGeneratorsResponse> {
  /**
   * @generated from field: repeated bytes records = 1;
   */
  records: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetFeedGeneratorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFeedGeneratorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedGeneratorsResponse {
    return new GetFeedGeneratorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedGeneratorsResponse {
    return new GetFeedGeneratorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedGeneratorsResponse {
    return new GetFeedGeneratorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedGeneratorsResponse | PlainMessage<GetFeedGeneratorsResponse> | undefined, b: GetFeedGeneratorsResponse | PlainMessage<GetFeedGeneratorsResponse> | undefined): boolean {
    return proto3.util.equals(GetFeedGeneratorsResponse, a, b);
  }
}

/**
 * - Return uris of feed generator records created by user A
 *     - `getActorFeeds`
 *
 * @generated from message bsky.GetActorFeedsRequest
 */
export class GetActorFeedsRequest extends Message<GetActorFeedsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorFeedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorFeedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorFeedsRequest {
    return new GetActorFeedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorFeedsRequest | PlainMessage<GetActorFeedsRequest> | undefined, b: GetActorFeedsRequest | PlainMessage<GetActorFeedsRequest> | undefined): boolean {
    return proto3.util.equals(GetActorFeedsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetActorFeedsResponse
 */
export class GetActorFeedsResponse extends Message<GetActorFeedsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetActorFeedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetActorFeedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActorFeedsResponse {
    return new GetActorFeedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActorFeedsResponse | PlainMessage<GetActorFeedsResponse> | undefined, b: GetActorFeedsResponse | PlainMessage<GetActorFeedsResponse> | undefined): boolean {
    return proto3.util.equals(GetActorFeedsResponse, a, b);
  }
}

/**
 * - Returns a list of suggested feed generator uris for an actor, paginated
 *     - `getSuggestedFeeds`
 *     - This is currently just hardcoded in the Appview DB
 *
 * @generated from message bsky.GetSuggestedFeedsRequest
 */
export class GetSuggestedFeedsRequest extends Message<GetSuggestedFeedsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetSuggestedFeedsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetSuggestedFeedsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedFeedsRequest {
    return new GetSuggestedFeedsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedFeedsRequest | PlainMessage<GetSuggestedFeedsRequest> | undefined, b: GetSuggestedFeedsRequest | PlainMessage<GetSuggestedFeedsRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestedFeedsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetSuggestedFeedsResponse
 */
export class GetSuggestedFeedsResponse extends Message<GetSuggestedFeedsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetSuggestedFeedsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetSuggestedFeedsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestedFeedsResponse {
    return new GetSuggestedFeedsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestedFeedsResponse | PlainMessage<GetSuggestedFeedsResponse> | undefined, b: GetSuggestedFeedsResponse | PlainMessage<GetSuggestedFeedsResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestedFeedsResponse, a, b);
  }
}

/**
 * - Returns feed generator validity and online status with uris A, B, C…
 *     - Not currently being used, but could be worhthwhile.
 *
 * @generated from message bsky.GetFeedGeneratorStatusRequest
 */
export class GetFeedGeneratorStatusRequest extends Message<GetFeedGeneratorStatusRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetFeedGeneratorStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFeedGeneratorStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedGeneratorStatusRequest {
    return new GetFeedGeneratorStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedGeneratorStatusRequest | PlainMessage<GetFeedGeneratorStatusRequest> | undefined, b: GetFeedGeneratorStatusRequest | PlainMessage<GetFeedGeneratorStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetFeedGeneratorStatusRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetFeedGeneratorStatusResponse
 */
export class GetFeedGeneratorStatusResponse extends Message<GetFeedGeneratorStatusResponse> {
  /**
   * @generated from field: repeated string status = 1;
   */
  status: string[] = [];

  constructor(data?: PartialMessage<GetFeedGeneratorStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetFeedGeneratorStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFeedGeneratorStatusResponse {
    return new GetFeedGeneratorStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFeedGeneratorStatusResponse | PlainMessage<GetFeedGeneratorStatusResponse> | undefined, b: GetFeedGeneratorStatusResponse | PlainMessage<GetFeedGeneratorStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetFeedGeneratorStatusResponse, a, b);
  }
}

/**
 * - Returns recent posts authored by a given DID, paginated
 *     - `getAuthorFeed`
 *     - Optionally: filter by if a post is/isn’t a reply and if a post has a media object in it
 *
 * @generated from message bsky.GetAuthorFeedRequest
 */
export class GetAuthorFeedRequest extends Message<GetAuthorFeedRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  /**
   * @generated from field: bool replies_only = 4;
   */
  repliesOnly = false;

  /**
   * @generated from field: bool media_only = 5;
   */
  mediaOnly = false;

  constructor(data?: PartialMessage<GetAuthorFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetAuthorFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "replies_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "media_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorFeedRequest {
    return new GetAuthorFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorFeedRequest | PlainMessage<GetAuthorFeedRequest> | undefined, b: GetAuthorFeedRequest | PlainMessage<GetAuthorFeedRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthorFeedRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetAuthorFeedResponse
 */
export class GetAuthorFeedResponse extends Message<GetAuthorFeedResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetAuthorFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetAuthorFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorFeedResponse {
    return new GetAuthorFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorFeedResponse | PlainMessage<GetAuthorFeedResponse> | undefined, b: GetAuthorFeedResponse | PlainMessage<GetAuthorFeedResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthorFeedResponse, a, b);
  }
}

/**
 * - Returns recent posts authored by users followed by a given DID, paginated
 *     - `getTimeline`
 *
 * @generated from message bsky.GetTimelineRequest
 */
export class GetTimelineRequest extends Message<GetTimelineRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetTimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetTimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimelineRequest {
    return new GetTimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined, b: GetTimelineRequest | PlainMessage<GetTimelineRequest> | undefined): boolean {
    return proto3.util.equals(GetTimelineRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetTimelineResponse
 */
export class GetTimelineResponse extends Message<GetTimelineResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetTimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetTimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimelineResponse {
    return new GetTimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined, b: GetTimelineResponse | PlainMessage<GetTimelineResponse> | undefined): boolean {
    return proto3.util.equals(GetTimelineResponse, a, b);
  }
}

/**
 * - Return recent post uris from users in list A
 *     - `getListFeed`
 *     - (This is essentially the same as `getTimeline` but instead of follows of a did, it is list items of a list)
 *
 * @generated from message bsky.GetListFeedRequest
 */
export class GetListFeedRequest extends Message<GetListFeedRequest> {
  /**
   * @generated from field: string list_uri = 1;
   */
  listUri = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetListFeedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListFeedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListFeedRequest {
    return new GetListFeedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListFeedRequest {
    return new GetListFeedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListFeedRequest {
    return new GetListFeedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetListFeedRequest | PlainMessage<GetListFeedRequest> | undefined, b: GetListFeedRequest | PlainMessage<GetListFeedRequest> | undefined): boolean {
    return proto3.util.equals(GetListFeedRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetListFeedResponse
 */
export class GetListFeedResponse extends Message<GetListFeedResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetListFeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetListFeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetListFeedResponse {
    return new GetListFeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetListFeedResponse {
    return new GetListFeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetListFeedResponse {
    return new GetListFeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetListFeedResponse | PlainMessage<GetListFeedResponse> | undefined, b: GetListFeedResponse | PlainMessage<GetListFeedResponse> | undefined): boolean {
    return proto3.util.equals(GetListFeedResponse, a, b);
  }
}

/**
 * Return posts uris of any replies N levels above or M levels below post A
 *
 * @generated from message bsky.GetThreadRequest
 */
export class GetThreadRequest extends Message<GetThreadRequest> {
  /**
   * @generated from field: string post_uri = 1;
   */
  postUri = "";

  /**
   * @generated from field: int32 above = 2;
   */
  above = 0;

  /**
   * @generated from field: int32 below = 3;
   */
  below = 0;

  constructor(data?: PartialMessage<GetThreadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetThreadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "post_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "above", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "below", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetThreadRequest {
    return new GetThreadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetThreadRequest {
    return new GetThreadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetThreadRequest {
    return new GetThreadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetThreadRequest | PlainMessage<GetThreadRequest> | undefined, b: GetThreadRequest | PlainMessage<GetThreadRequest> | undefined): boolean {
    return proto3.util.equals(GetThreadRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetThreadResponse
 */
export class GetThreadResponse extends Message<GetThreadResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetThreadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetThreadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetThreadResponse {
    return new GetThreadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetThreadResponse {
    return new GetThreadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetThreadResponse {
    return new GetThreadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetThreadResponse | PlainMessage<GetThreadResponse> | undefined, b: GetThreadResponse | PlainMessage<GetThreadResponse> | undefined): boolean {
    return proto3.util.equals(GetThreadResponse, a, b);
  }
}

/**
 * Return threadgate records with uris A, B, C…
 *
 * @generated from message bsky.GetThreadgatesRequest
 */
export class GetThreadgatesRequest extends Message<GetThreadgatesRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetThreadgatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetThreadgatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetThreadgatesRequest {
    return new GetThreadgatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetThreadgatesRequest {
    return new GetThreadgatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetThreadgatesRequest {
    return new GetThreadgatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetThreadgatesRequest | PlainMessage<GetThreadgatesRequest> | undefined, b: GetThreadgatesRequest | PlainMessage<GetThreadgatesRequest> | undefined): boolean {
    return proto3.util.equals(GetThreadgatesRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetThreadgatesResponse
 */
export class GetThreadgatesResponse extends Message<GetThreadgatesResponse> {
  /**
   * @generated from field: repeated bytes records = 1;
   */
  records: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetThreadgatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetThreadgatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetThreadgatesResponse {
    return new GetThreadgatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetThreadgatesResponse {
    return new GetThreadgatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetThreadgatesResponse {
    return new GetThreadgatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetThreadgatesResponse | PlainMessage<GetThreadgatesResponse> | undefined, b: GetThreadgatesResponse | PlainMessage<GetThreadgatesResponse> | undefined): boolean {
    return proto3.util.equals(GetThreadgatesResponse, a, b);
  }
}

/**
 * - Return DIDs of actors matching term, paginated
 *     - `searchActors` skeleton
 *
 * @generated from message bsky.SearchActorsRequest
 */
export class SearchActorsRequest extends Message<SearchActorsRequest> {
  /**
   * @generated from field: string term = 1;
   */
  term = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<SearchActorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.SearchActorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchActorsRequest {
    return new SearchActorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchActorsRequest {
    return new SearchActorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchActorsRequest {
    return new SearchActorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchActorsRequest | PlainMessage<SearchActorsRequest> | undefined, b: SearchActorsRequest | PlainMessage<SearchActorsRequest> | undefined): boolean {
    return proto3.util.equals(SearchActorsRequest, a, b);
  }
}

/**
 * @generated from message bsky.SearchActorsResponse
 */
export class SearchActorsResponse extends Message<SearchActorsResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<SearchActorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.SearchActorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchActorsResponse {
    return new SearchActorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchActorsResponse {
    return new SearchActorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchActorsResponse {
    return new SearchActorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchActorsResponse | PlainMessage<SearchActorsResponse> | undefined, b: SearchActorsResponse | PlainMessage<SearchActorsResponse> | undefined): boolean {
    return proto3.util.equals(SearchActorsResponse, a, b);
  }
}

/**
 * - Return uris of posts matching term, paginated
 *     - `searchPosts` skeleton
 *
 * @generated from message bsky.SearchPostsRequest
 */
export class SearchPostsRequest extends Message<SearchPostsRequest> {
  /**
   * @generated from field: string term = 1;
   */
  term = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<SearchPostsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.SearchPostsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "term", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPostsRequest {
    return new SearchPostsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPostsRequest {
    return new SearchPostsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPostsRequest {
    return new SearchPostsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPostsRequest | PlainMessage<SearchPostsRequest> | undefined, b: SearchPostsRequest | PlainMessage<SearchPostsRequest> | undefined): boolean {
    return proto3.util.equals(SearchPostsRequest, a, b);
  }
}

/**
 * @generated from message bsky.SearchPostsResponse
 */
export class SearchPostsResponse extends Message<SearchPostsResponse> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<SearchPostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.SearchPostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchPostsResponse {
    return new SearchPostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchPostsResponse {
    return new SearchPostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchPostsResponse {
    return new SearchPostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchPostsResponse | PlainMessage<SearchPostsResponse> | undefined, b: SearchPostsResponse | PlainMessage<SearchPostsResponse> | undefined): boolean {
    return proto3.util.equals(SearchPostsResponse, a, b);
  }
}

/**
 * - Return DIDs of suggested follows for a user, excluding anyone they already follow
 *     - `getSuggestions`
 *
 * @generated from message bsky.GetSuggestionsRequest
 */
export class GetSuggestionsRequest extends Message<GetSuggestionsRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * @generated from field: string cursor = 3;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetSuggestionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetSuggestionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionsRequest {
    return new GetSuggestionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionsRequest | PlainMessage<GetSuggestionsRequest> | undefined, b: GetSuggestionsRequest | PlainMessage<GetSuggestionsRequest> | undefined): boolean {
    return proto3.util.equals(GetSuggestionsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetSuggestionsResponse
 */
export class GetSuggestionsResponse extends Message<GetSuggestionsResponse> {
  /**
   * @generated from field: repeated string dids = 1;
   */
  dids: string[] = [];

  /**
   * @generated from field: string cursor = 2;
   */
  cursor = "";

  constructor(data?: PartialMessage<GetSuggestionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetSuggestionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSuggestionsResponse {
    return new GetSuggestionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSuggestionsResponse | PlainMessage<GetSuggestionsResponse> | undefined, b: GetSuggestionsResponse | PlainMessage<GetSuggestionsResponse> | undefined): boolean {
    return proto3.util.equals(GetSuggestionsResponse, a, b);
  }
}

/**
 * - Return post records with uris A, B, C…
 *     - All feed hydration
 *
 * @generated from message bsky.GetPostsRequest
 */
export class GetPostsRequest extends Message<GetPostsRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetPostsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetPostsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsRequest {
    return new GetPostsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsRequest {
    return new GetPostsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsRequest {
    return new GetPostsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsRequest | PlainMessage<GetPostsRequest> | undefined, b: GetPostsRequest | PlainMessage<GetPostsRequest> | undefined): boolean {
    return proto3.util.equals(GetPostsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetPostsResponse
 */
export class GetPostsResponse extends Message<GetPostsResponse> {
  /**
   * @generated from field: repeated bytes records = 1;
   */
  records: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetPostsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetPostsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostsResponse {
    return new GetPostsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostsResponse {
    return new GetPostsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostsResponse {
    return new GetPostsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostsResponse | PlainMessage<GetPostsResponse> | undefined, b: GetPostsResponse | PlainMessage<GetPostsResponse> | undefined): boolean {
    return proto3.util.equals(GetPostsResponse, a, b);
  }
}

/**
 * - Return post reply count with uris A, B, C…
 *     - All feed hydration
 *
 * @generated from message bsky.GetPostReplyCountRequest
 */
export class GetPostReplyCountRequest extends Message<GetPostReplyCountRequest> {
  /**
   * @generated from field: repeated string uris = 1;
   */
  uris: string[] = [];

  constructor(data?: PartialMessage<GetPostReplyCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetPostReplyCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uris", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostReplyCountRequest {
    return new GetPostReplyCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostReplyCountRequest {
    return new GetPostReplyCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostReplyCountRequest {
    return new GetPostReplyCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostReplyCountRequest | PlainMessage<GetPostReplyCountRequest> | undefined, b: GetPostReplyCountRequest | PlainMessage<GetPostReplyCountRequest> | undefined): boolean {
    return proto3.util.equals(GetPostReplyCountRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetPostReplyCountResponse
 */
export class GetPostReplyCountResponse extends Message<GetPostReplyCountResponse> {
  /**
   * @generated from field: repeated int32 counts = 1;
   */
  counts: number[] = [];

  constructor(data?: PartialMessage<GetPostReplyCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetPostReplyCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "counts", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPostReplyCountResponse {
    return new GetPostReplyCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPostReplyCountResponse {
    return new GetPostReplyCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPostReplyCountResponse {
    return new GetPostReplyCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPostReplyCountResponse | PlainMessage<GetPostReplyCountResponse> | undefined, b: GetPostReplyCountResponse | PlainMessage<GetPostReplyCountResponse> | undefined): boolean {
    return proto3.util.equals(GetPostReplyCountResponse, a, b);
  }
}

/**
 * - Get all labels on a subjects A, B, C (uri or did) issued by dids D, E, F…
 *     - label hydration on nearly every view
 *
 * @generated from message bsky.GetLabelsRequest
 */
export class GetLabelsRequest extends Message<GetLabelsRequest> {
  /**
   * @generated from field: repeated string subjects = 1;
   */
  subjects: string[] = [];

  /**
   * @generated from field: repeated string issuers = 2;
   */
  issuers: string[] = [];

  constructor(data?: PartialMessage<GetLabelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLabelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subjects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "issuers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLabelsRequest {
    return new GetLabelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLabelsRequest {
    return new GetLabelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLabelsRequest {
    return new GetLabelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLabelsRequest | PlainMessage<GetLabelsRequest> | undefined, b: GetLabelsRequest | PlainMessage<GetLabelsRequest> | undefined): boolean {
    return proto3.util.equals(GetLabelsRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetLabelsResponse
 */
export class GetLabelsResponse extends Message<GetLabelsResponse> {
  /**
   * @generated from field: repeated bytes records = 1;
   */
  records: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetLabelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLabelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "records", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLabelsResponse {
    return new GetLabelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLabelsResponse {
    return new GetLabelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLabelsResponse {
    return new GetLabelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLabelsResponse | PlainMessage<GetLabelsResponse> | undefined, b: GetLabelsResponse | PlainMessage<GetLabelsResponse> | undefined): boolean {
    return proto3.util.equals(GetLabelsResponse, a, b);
  }
}

/**
 * - Latest repo rev of user w/ DID
 *     - Read-after-write header in`getProfile`, `getProfiles`, `getActorLikes`, `getAuthorFeed`, `getListFeed`, `getPostThread`, `getTimeline`.  Could it be view dependent?
 *
 * @generated from message bsky.GetLatestRevRequest
 */
export class GetLatestRevRequest extends Message<GetLatestRevRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  constructor(data?: PartialMessage<GetLatestRevRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLatestRevRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestRevRequest {
    return new GetLatestRevRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined, b: GetLatestRevRequest | PlainMessage<GetLatestRevRequest> | undefined): boolean {
    return proto3.util.equals(GetLatestRevRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetLatestRevResponse
 */
export class GetLatestRevResponse extends Message<GetLatestRevResponse> {
  /**
   * @generated from field: string rev = 1;
   */
  rev = "";

  constructor(data?: PartialMessage<GetLatestRevResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetLatestRevResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rev", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestRevResponse {
    return new GetLatestRevResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined, b: GetLatestRevResponse | PlainMessage<GetLatestRevResponse> | undefined): boolean {
    return proto3.util.equals(GetLatestRevResponse, a, b);
  }
}

/**
 * - Return whether blob is taken down given DID and CID
 *
 * @generated from message bsky.GetBlobTakedownRequest
 */
export class GetBlobTakedownRequest extends Message<GetBlobTakedownRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string cid = 2;
   */
  cid = "";

  constructor(data?: PartialMessage<GetBlobTakedownRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlobTakedownRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlobTakedownRequest {
    return new GetBlobTakedownRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlobTakedownRequest | PlainMessage<GetBlobTakedownRequest> | undefined, b: GetBlobTakedownRequest | PlainMessage<GetBlobTakedownRequest> | undefined): boolean {
    return proto3.util.equals(GetBlobTakedownRequest, a, b);
  }
}

/**
 * @generated from message bsky.GetBlobTakedownResponse
 */
export class GetBlobTakedownResponse extends Message<GetBlobTakedownResponse> {
  /**
   * @generated from field: bool taken_down = 1;
   */
  takenDown = false;

  constructor(data?: PartialMessage<GetBlobTakedownResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.GetBlobTakedownResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taken_down", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBlobTakedownResponse {
    return new GetBlobTakedownResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBlobTakedownResponse | PlainMessage<GetBlobTakedownResponse> | undefined, b: GetBlobTakedownResponse | PlainMessage<GetBlobTakedownResponse> | undefined): boolean {
    return proto3.util.equals(GetBlobTakedownResponse, a, b);
  }
}

/**
 * - Update takedown state for actors, records, and blobs
 *
 * @generated from message bsky.UpdateTakedownRequest
 */
export class UpdateTakedownRequest extends Message<UpdateTakedownRequest> {
  /**
   * @generated from field: string actor_did = 1;
   */
  actorDid = "";

  /**
   * @generated from field: string record_uri = 2;
   */
  recordUri = "";

  /**
   * @generated from field: string blob_cid = 3;
   */
  blobCid = "";

  /**
   * @generated from field: bool taken_down = 4;
   */
  takenDown = false;

  constructor(data?: PartialMessage<UpdateTakedownRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.UpdateTakedownRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actor_did", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "record_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob_cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "taken_down", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTakedownRequest {
    return new UpdateTakedownRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTakedownRequest {
    return new UpdateTakedownRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTakedownRequest {
    return new UpdateTakedownRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTakedownRequest | PlainMessage<UpdateTakedownRequest> | undefined, b: UpdateTakedownRequest | PlainMessage<UpdateTakedownRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTakedownRequest, a, b);
  }
}

/**
 * @generated from message bsky.UpdateTakedownResponse
 */
export class UpdateTakedownResponse extends Message<UpdateTakedownResponse> {
  constructor(data?: PartialMessage<UpdateTakedownResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.UpdateTakedownResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTakedownResponse {
    return new UpdateTakedownResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTakedownResponse {
    return new UpdateTakedownResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTakedownResponse {
    return new UpdateTakedownResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTakedownResponse | PlainMessage<UpdateTakedownResponse> | undefined, b: UpdateTakedownResponse | PlainMessage<UpdateTakedownResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTakedownResponse, a, b);
  }
}

/**
 * Ping
 *
 * @generated from message bsky.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message bsky.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bsky.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

